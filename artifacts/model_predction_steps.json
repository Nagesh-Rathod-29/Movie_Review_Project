{"model_predict_steps": "def lang_converter(text):\n  lang = detect(text)\n  if lang == 'en':\n    return text\n  else:\n    output = GoogleTranslator(source='auto',target='en').translate(text)\n    return output\n\ndef remove_spaces(text):\n  clean_text = text.replace('\n',' ').replace('\t',' ').replace('  ',' ')\n  return clean_text\n\ndef split_words(data):\n  text = contractions.fix(data)\n  return text\n\nstopword_list = stopwords.words('english')\nstopword_list.remove('no')\nstopword_list.remove('nor')\nstopword_list.remove('not')\n\ndef clean_text(data):\n\n  token = word_tokenize(data)\n\n  text = [word.lower() for word in token if (word.lower() not in stopword_list) and (word not in punctuation) and (len(word)>2) and (word.isalpha())]\n  return \" \".join(text)\n\n\n\n#input_text = \"This is good movie ...... loved it!!!\"\n#input_text = \"Mala muy mala no pierdas tu tiempo\"\n#input_text = \"This movie is pointless no sence\"\ninput_text = \"Not sure what was in the mind of the director. Does he think that by VFX he can sell any trash? Showed every character of Ramayana so c...\"\ntext = lang_converter(input_text)\nprint(\"Input text:\",text)\ntext = remove_spaces(text)\ntext = split_words(text)\ntext = clean_text(text)\n\ntest_array = count_vec.transform([text]).A\ntest_array = np.asarray(test_array)\n\nprediction = svm_hyper.predict(test_array)\n\nif prediction[0] == 0:\n  print(\"This is negative review\".upper())\nelse:\n  print(\"this is positive review\".upper())\n"}